const mysql = require('mysql');
const qs = require('qs');
const axios = require('axios');

                                   
const pool = mysql.createPool({
  connectionLimit : 10,
  host     : 'soapboxinternal.riversilica.com',
  user     : 'pixfixlocal',
  password : 'Pixfix@123',
  database : 'pixfix_test'
});

// var job_name;
// var job_url;
exports.handler =  function(event, context, callback) {
  var jsonData = JSON.parse(JSON.stringify(event).replace("body-json","body"));
  console.log(jsonData.body);
  var postParams = jsonData.body ? jsonData.body.split("&") : [];
//  var postParams = jsonData.body.split("&");
 // var res = postParams.toString().replace(/%20/g,' ');


  var title="";
  var username="";
  var location="";
  

 postParams[0]? check(postParams[0]): "";
  postParams[1] ? check(postParams[1]) : "";
  postParams[2] ? check(postParams[2]) : "";
  
    function check(data)
  {
    let response = data.split("=");
    
    if(response["0"] == "title")
    {
      title = response["1"].toString().replace(/%20/g,' ');
    }
    else
    if(response["0"] == "username")
    {
      username  = response["1"].toString().replace(/%20/g,' ');
    }
    else
    if(response["0"] == "location")
    {
      location = response["1"].toString().replace(/%20/g,' ');
    }
  }
  
  let errorMsg = {};
  let status = true;
  if(title == "")
  {
    errorMsg.Title =  "title Should not be Empty";
    status = false;
  }
  
  if(username == "")
  {
    errorMsg.Username=  "username Should not be Empty";
    status = false;
  }
  
  if(location == "")
  {
    errorMsg.Location=  `location Should not be Empty`;
    status = false;
  }
 
  
  let error = 
  {
    status :false,
    message: errorMsg
  };

if(status != true)
{
  callback(null, error);
  return;
}


  var apiResponse = {};
  var job_iD;
  var job_Name;
  var rtmp_url;
  var HlsoutUrl;


  
  context.callbackWaitsForEmptyEventLoop = false;
  pool.getConnection(function(err, con) {
    if (err) throw err;
    con.query("SELECT * FROM tbl_job_details where status = 'free'", function (err, result, fields) {
    if (err) throw err;
    console.log(result.length);
    if(result.length == 0)
    {
     // console.log("no job found");
      apiResponse.status=false;
      apiResponse.message="NO JOB FOUND";
      callback(null, apiResponse);
       
    }

else
    {
    
    
    job_iD= result[0].jobID;
    job_Name= result[0].jobNAME;
    rtmp_url = result[0].RTMPurl;
    HlsoutUrl = result[0].HlsOutUrl;
     
    con.query("select * from tbl_live_transcoder" , function (err, results, fields){
      if (err) throw err;
      var user_name = results[0].user_name;
      var password = results[0].password;
      var IP = results[0].transcoderurl;
 
    console.log(job_iD);
     
  con.query("update tbl_job_details set status = 'used', currentUser =  '"+username+"' where jobID = '"+job_iD+"'" , function (err, result, fields) {

    if (err) throw err;
    
    var url = IP+"/users";
  const data={};
  data.user_name = user_name;
  data.password = password;
  
  axios.post(url, qs.stringify(data))
    .then((res) => {
      console.log(url);
      console.log(JSON.stringify(res.data));
        
        if(res.data["status"]=="success")
        {
          var cookieRes=res.headers['set-cookie'];
          var cookieArray=cookieRes.split(";");
          var sessionValArray=cookieArray[0].split("=");
          var phpSessionId=cookieArray[0];
    
        }
        else
        {
          apiResponse.status=false;
          apiResponse.messgae="Invalid Authorization";
          callback(null, apiResponse);
        }
        
let url1 = IP+"/jobs/job_get/"+job_Name;
           
                axios.get(url1, {headers:{"Cookie":phpSessionId}})
         
                .then((res2) =>{ 
                  
                  console.log("entering");
                  
                var response = res2.data.pfmt_job.job_status;
                var node = res2.data.pfmt_job.node_name;
                
                if(response != "running")
                {
                  let url2 = IP+"/jobs/job_start/"+job_Name+"?node_name="+node;
               
                    axios.get(url2, {headers:{"Cookie": phpSessionId}})
            
                    .then((res3) =>{ 
                            
                          
        con.query("INSERT INTO tbl_live_assets(assetUrl, createdBy, title, description, isDRMRequired,orgId) VALUES('"+HlsoutUrl+"','"+username+"','"+title+"','"+location+"',1,'1')", function (err, result1, fields){
                                  if (err) throw err;
                                  console.log(username);
                                    console.log(result1);
                                
                   
                     
                      
                      var apiResponse1 = {};
                      apiResponse1.status=true;
                      apiResponse1.rtmp_url=rtmp_url;
                      apiResponse1.job_Name=job_Name;
                      apiResponse1.HlsoutUrl = HlsoutUrl;
                    
                     
                      
                      callback(null, apiResponse1);
                    });
                    });
                }
                else {
                  let ress;
                  callback(null, "Job is already running");
                  callback(null,ress.data);
                }
              
                   
                  
                
                    
                
}).catch((error)=>{
  apiResponse.status=true;
        apiResponse.messgae="JOB DETAILS";
        apiResponse.data=error;
       
     
});

  con.release();
    
  });
  });
    
});

}

                 

});
});
};

// const formData = new FormData();
  //var link = "http://192.46.214.49:3000/pixfixws/create/live";
                                    // formData.append('title', 'new live assefffffft-151');
                                    // formData.append('assetUrl', 'http://rsweb.dishhome.com.np/fightsportshd_03_px0219285/index.m3u8');
                                    // formData.append('thumbnails', fs.createReadStream('./photos local/KGF.jpg'));
                                    // formData.append('account_id', 1);
                                    // formData.append('createdBy', '94');
                                    // formData.append('isDRMRequired', '1');
                                    // formData.append('description', 'for testing');
                                    
                                    
                                    
// console.log("live assets");
                    //             axios.post(link, formData, {
                    //                                 headers: { "Content-Type": "multipart/form-data",},
                    //                                         })
                                                           
                    //                                       .then((resp) => {
                    //                                         console.log(resp.data);
                                                             
                    //                                         // callback(null,"assets created successfully");
                    //                                                       })
                    //                                                   .catch((err) => {
                    //                                                         console.log(err);
                    //                                                         });
           
          
                    //   }
       
                     
                     
                      
                      // var serverUrl = res2.data.pfmt_job.pfmt_input_group.inputs[0].pfmt_input.streamer[0].pfmt_input_stream.gstaf_src.gstaf_src_rtmp.server_url;
                      // var name = res2.data.pfmt_job.job_name;
                      // var ID = res2.data.pfmt_job.pfmt_job_id;
                
                      // var serverUrl= 

                      // console.log(res2.data.pfmt_job.pfmt_input_group.inputs[0].pfmt_input.streamer[0].pfmt_input_stream.gstaf_src.gstaf_src_rtmp.server_url);
                      // console.log(name);
                      // console.log(ID);
                      
                      
                      //console.log("EVENT: \n" + JSON.stringify(event, null, 2));
 
  //return title+" "+username+" "+location;
